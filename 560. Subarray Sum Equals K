// O(n^2)
class Solution {
    public int subarraySum(int[] nums, int k) {
        int lo = 0;
        int res = 0;
        while (lo < nums.length) {
            int hi = lo;
            int temp = 0;
            while (hi < nums.length) {
                temp = temp + nums[hi];
                if (temp == k) {res++; }
                hi++;
            }
            lo++;
        }
    return res;
    }
}

//O(n)
class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> mymap = new HashMap<>();
        mymap.put(0, 1);
        int sum = 0;
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            // update ans before updating map
            ans += mymap.getOrDefault(sum - k, 0);
            int count = mymap.getOrDefault(sum, 0);
            count += 1;
            mymap.put(sum, count);
        }
        return ans;
    }
}
