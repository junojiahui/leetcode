// DFS
// no need to record visited since we update the grid to '0'

class Solution {
    int[] arr1 = {0, 0, -1, 1};
    int[] arr2 = {-1, 1, 0, 0};
    
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        
        int row = grid.length;
        int col = grid[0].length;
        int ans = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '1') {
                    ans++;
                    grid[i][j] = '0';
                    dfs(i, j, grid);
                } 
            }
        }
        return ans;
    }
    
    private void dfs(int i, int j, char[][] grid) {
        for (int k = 0; k < 4; k++) {
            if (i+arr1[k] >= 0 && i+arr1[k] < grid.length && j+arr2[k] >= 0 && j+arr2[k] < grid[0].length) {
                if (grid[i+arr1[k]][j+arr2[k]] == '1') {
                    grid[i+arr1[k]][j+arr2[k]] = '0';
                    dfs(i+arr1[k], j+arr2[k], grid);
                }
            }
        }
    }
}
